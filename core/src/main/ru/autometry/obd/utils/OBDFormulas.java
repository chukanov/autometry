package ru.autometry.obd.utils;

import ru.autometry.utils.common.MathUtils;

/**
 * Created by jeck on 31/07/14
 */
public class OBDFormulas {
  public static int[] mbar = {
          -29, -22, -15, -8, -1, 5, 13, 20, 27, 34, 41, 49, 56, 63, 70,
          77, 84, 92, 99, 106, 113, 120, 127, 135, 142, 149, 156, 163, 170, 178, 185,
          192, 199, 206, 214, 221, 228, 235, 242, 249, 257, 264, 271, 278, 285, 292,
          300, 307, 314, 321, 328, 336, 343, 350, 357, 364, 371, 379, 386, 393, 400,
          407, 414, 422, 429, 436, 443, 450, 457, 465, 472, 479, 486, 493, 501, 508,
          515, 522, 529, 536, 544, 551, 558, 565, 572, 579, 587, 594, 601, 608, 615,
          622, 630, 637, 644, 651, 658, 666, 673, 680, 687, 694, 701, 709, 716, 723,
          730, 737, 744, 752, 759, 766, 773, 780, 787, 795, 802, 809, 816, 823, 831,
          838, 845, 852, 859, 866, 874, 881, 888, 895, 902, 909, 917, 924, 931, 938,
          945, 953, 960, 967, 974, 981, 988, 996, 1003, 1010, 1017, 1024, 1031, 1039,
          1046, 1053, 1060, 1067, 1074, 1082, 1089, 1096, 1103, 1110, 1118, 1125, 1132,
          1139, 1146, 1153, 1161, 1168, 1175, 1182, 1189, 1196, 1204, 1211, 1218, 1225,
          1232, 1239, 1247, 1254, 1261, 1268, 1275, 1283, 1290, 1297, 1304, 1311, 1318,
          1326, 1333, 1340, 1347, 1354, 1361, 1369, 1376, 1383, 1390, 1397, 1405, 1412,
          1419, 1426, 1433, 1440, 1448, 1455, 1462, 1469, 1476, 1483, 1491, 1498, 1505,
          1512, 1519, 1526, 1534, 1541, 1548, 1555, 1562, 1570, 1577, 1584, 1591, 1598,
          1605, 1613, 1620, 1627, 1634, 1641, 1648, 1656, 1663, 1670, 1677, 1684, 1691,
          1699, 1706, 1713, 1720, 1727, 1735, 1742, 1749, 1756, 1763, 1770, 1778, 1785,
          1792, 1799};

  public static double[] psi = {
          -31.22, -31.02, -30.81, -30.60, -30.40, -30.22, -29.98, -29.78, -29.57,
          -29.36, -29.16, -28.92, -28.71, -28.51, -28.30, -28.09, -27.89, -27.65,
          -27.44, -27.24, -27.03, -26.82, -26.62, -26.38, -26.17, -25.97, -25.76,
          -25.55, -25.35, -25.11, -24.90, -24.70, -24.49, -24.28, -24.05, -23.84,
          -23.63, -23.43, -23.22, -23.01, -22.78, -22.57, -22.36, -22.16, -21.95,
          -21.74, -21.51, -21.30, -21.09, -20.88, -20.68, -20.44, -20.23, -20.03,
          -19.82, -19.61, -19.41, -19.17, -18.96, -18.76, -18.55, -18.34, -18.14,
          -17.90, -17.69, -17.49, -17.28, -17.07, -16.87, -16.63, -16.42, -16.22,
          -16.01, -15.80, -15.57, -15.36, -15.15, -14.95, -14.74, -14.53, -14.30,
          -14.09, -13.88, -13.68, -13.47, -13.26, -13.03, -12.82, -12.61, -12.41,
          -12.20, -11.99, -11.76, -11.55, -11.34, -11.14, -10.93, -10.69, -10.49,
          -10.28, -10.07, -9.87, -9.66, -9.42, -9.22, -9.01, -8.80, -8.60, -8.39,
          -8.15, -7.95, -7.74, -7.53, -7.33, -7.12, -6.88, -6.68, -6.47, -6.26,
          -6.06, -5.82, -5.61, -5.41, -5.20, -4.99, -4.79, -4.55, -4.34, -4.14,
          -3.93, -3.72, -3.52, -3.28, -3.07, -2.87, -2.66, -2.45, -2.22, -2.01,
          -1.80, -1.60, -1.39, -1.18, -0.95, -0.74, -0.53, -0.32, -0.12, 0.04, 0.16,
          0.26, 0.36, 0.46, 0.57, 0.67, 0.78, 0.88, 0.99, 1.09, 1.19, 1.31, 1.41,
          1.51, 1.61, 1.71, 1.81, 1.93, 2.03, 2.13, 2.23, 2.33, 2.44, 2.55, 2.65,
          2.76, 2.86, 2.96, 3.06, 3.18, 3.28, 3.38, 3.48, 3.58, 3.70, 3.80, 3.90,
          4.00, 4.10, 4.21, 4.32, 4.42, 4.52, 4.63, 4.73, 4.83, 4.94, 5.05, 5.15,
          5.25, 5.35, 5.47, 5.57, 5.67, 5.77, 5.87, 5.97, 6.09, 6.19, 6.29, 6.39,
          6.50, 6.60, 6.71, 6.82, 6.92, 7.02, 7.12, 7.22, 7.34, 7.44, 7.54, 7.64,
          7.74, 7.86, 7.96, 8.06, 8.16, 8.27, 8.37, 8.48, 8.58, 8.69, 8.79, 8.89,
          8.99, 9.11, 9.21, 9.31, 9.41, 9.51, 9.61, 9.73, 9.83, 9.93, 10.03, 10.14,
          10.25, 10.35, 10.45, 10.56, 10.66, 10.76, 10.88, 10.98, 11.08, 11.18};


  public static double formulaLAFSensor(byte value) {
    return 0.289 * Math.pow(value, 4) + 2.159 * Math.pow(value, 3) + 6.081 * Math.pow(value, 2) + 7.389 * value;
  }

  public static double formulaMAPInPSI(double buffer) {
    return MathUtils.roundTo((buffer * 0.0145038) - 14.5038, 2);
  }

  public static String formulaMAPPSIHEX(double buffer) {
    long num = Math.round(((((((buffer / 14.7) * 1000.0) + 1000.0) / 364.0) + 0.125) / 5.0) * 255.0);
    return Long.toHexString(num);
  }

  public static double formulaDutyCycle(double rpm, double InjTimeIn_ms) {
    return rpm / (60 * 2) * (InjTimeIn_ms / 1000) * 100;
  }


}
